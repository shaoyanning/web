新增加类别模块,如何实现ajax访问类别数据显示在前段的下拉列表框

   1: 创建category model
   
   2： 新建CategoryDao.xml文件,并且注册到Mybatis主配置文件中并且完成类别的查询功能
   
   3: 新建CategoryDao接口,接口方法必须与Mapper中的id绑定.接口类全名必须是mapper.xml文件中命名空间
   
   4: spring中配置Dao接口+ Mapper文件生成CategoryDaoImpl
   
   5: 创建Service + Controller即可(需要交给配置文件实现依赖注入)


spring MVC处理 ajax请求:

    1: 页面添加jquery.js文件,并且测试jquery环境
    2: 前端$.post()发送ajax请求,可以传递基于json的参数给后台
    3: 后台@ResponseBody注解提示返回的是JSON格式(此处需要导入两个json的jar文件)
    4: 前端通过回调函数,获取json格式,并且转化为jquery对象然后根据业务进行赋值

Spring MVC的框架搭建流程:

   1: 添加jar包,与spring-mvc.xml配置文件
   
   2: 在web.xml中配置后缀过滤、加载mvc配置文件(不要忘记启动的时候实例化servlet)
   
      <load-on-startup>1</load-on-startup>
      
      <url-pattern>*.mvc</url-pattern>
      
      <init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-mvc.xml</param-value>
	  </init-param>
   
    3: 创建Controller并且在xml中进行<bean>配置(此controller通过requestMapping访问)
    
         3.1: 可以通过 @Resource 来按照类型注入request,session 
         3.2: 开启注解扫描 
         
         <!-- 开启注解扫描 -->
		<mvc:annotation-driven />
		<!-- 配置要扫描的包名,支持子包 -->
		<context:component-scan base-package="cn.dw.oa.controller" />
		
    4：MVC通过前缀进行转发重定向: forward:,redirect:(两种方式都不需要添加工程名)
   
    5：spring-bean.xml也需要在启动的时候加载.这样Controller依赖Service才不可能为空(否则在启动时创建Controller时报错)


day04_PM: new对象的三个缺点: Spring框架能够解决下面问题:

     1: 硬编码不灵活: new  ProductDaoImpl(); 以后修改成Oracle数据库则需要修改源码
     2: 不能控制对象创建时间。正常应该在项目启动的时候就要创建对象
     3: 不能控制对象的创建数量： service dao jdbcutils都应该是单例模式(要注意线程安全问题)

day04_AM: Java乱码问题:

    1: 如果导入的项目有乱码问题则应该项目本身的编码与workspace不匹配 (修改项目本身编码)
    
    2：jsp页面都有编码,此时页面编码必须与项目编码一致
    
    3: 如果通过db.sql插入有乱码问题,则说明数据库编码与项目编码不一致(数据库编码不能变),
    
              应该配置连接数据库时url地址  例如: "jdbc:mysql://localhost:3306/db1?characterEncoding=utf-8";
              
    4: 如果junit测试正常(插入数据没有乱码),但是从web项目中插入有乱码,则说明需要设置request编码

day01_AM: Java体系结构、项目模块介绍

Java 体系结构:

         Web Project

     Spring Boot   Docker

   Spring  SpringMvc  Mybatis

  Servlet  Filter  Listener

          Tomcat

      JDK > JRE >  JVM

     window     linux


项目体系结构(层与层之间不能够跨层依赖,不能相互依赖)

     显示层(MVC)

    业务逻辑层
    
     持久层   
 
    DB
